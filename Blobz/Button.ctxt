#BlueJ class context
comment0.target=Button
comment0.text=\n\ Write\ a\ description\ of\ class\ Buttons\ here.\n\ \n\ @author\ (your\ name)\ \n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=
comment1.target=void\ act()
comment1.text=\n\ Act\ -\ do\ whatever\ the\ Buttons\ wants\ to\ do.\ This\ method\ is\ called\ whenever\n\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\n
comment2.params=
comment2.target=void\ redraw()
comment3.params=
comment3.target=void\ drawNormalButton()
comment4.params=
comment4.target=void\ drawFaintButton()
comment5.params=
comment5.target=boolean\ getClicked()
comment6.params=canvas\ text\ middleX\ bottomY
comment6.target=void\ drawCenteredText(greenfoot.GreenfootImage,\ java.lang.String,\ int,\ int)
comment6.text=\n\ <h3>Finally,\ draw\ centered\ text\ in\ Greenfoot\!</h3>\n\ <p>\n\ <b>IMPORTANT\:</b>\ Set\ your\ Font\ in\ your\ GreenfootImage\ before\ you\ send\ it\ here.\n\ </p>\n\ <p>Use\ this\ instead\ of\ Greenfoot.drawString\ to\ center\ your\ text,\ or\ just\ call\ getStringWidth\n\ \ \ \ directly\ and\ draw\ it\ yourself\ if\ you\ prefer\ the\ control\ over\ the\ ease\ of\ use.</p>\n\ \n\ @param\ canvas\ \ \ \ The\ GreenfootImage\ that\ you\ want\ to\ draw\ onto,\ often\ the\ background\ of\ a\ World,\ but\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ could\ also\ be\ an\ Actor's\ image\ or\ any\ other\ image.\n\ @param\ text\ \ \ \ \ \ The\ text\ to\ be\ drawn.\n\ @param\ middleX\ \ \ the\ x\ Coordinate\ that\ the\ text\ should\ be\ centered\ on\n\ @param\ bottomY\ \ \ the\ y\ Coordinate\ at\ the\ baseline\ of\ the\ text\ (similar\ to\ GreenfootImage.drawString)\n\ \n\ @since\ June\ 2021\n
comment7.params=canvas\ text\ bottomY
comment7.target=void\ drawCenteredText(greenfoot.GreenfootImage,\ java.lang.String,\ int)
comment7.text=\n\ <p>\n\ <b>IMPORTANT\:</b>\ Set\ your\ Font\ in\ your\ GreenfootImage\ before\ you\ send\ it\ here.\n\ </p>\n\ <p>Similar\ to\ the\ method\ above,\ except\ it\ always\ centers\ the\ text\ on\ the\ whole\ image\n\ \ \ \ instead\ of\ a\ specified\ x\ position.\ UNTESTED\!</p>\n\ \n\ @param\ canvas\ \ \ \ The\ GreenfootImage\ that\ you\ want\ to\ draw\ onto,\ often\ the\ background\ of\ a\ World,\ but\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ could\ also\ be\ an\ Actor's\ image\ or\ any\ other\ image.\n\ @param\ text\ \ \ \ \ \ The\ text\ to\ be\ drawn.\n\ @param\ bottomY\ \ \ the\ y\ Coordinate\ at\ the\ baseline\ of\ the\ text\ (similar\ to\ GreenfootImage.drawString)\n\ \n\ @since\ June\ 2021\n
comment8.params=font\ text
comment8.target=int\ getStringWidth(greenfoot.Font,\ java.lang.String)
comment8.text=\n\ Get\ the\ Width\ of\ a\ String,\ if\ it\ was\ printed\ out\ using\ the\ drawString\ command\ in\ a\ particular\n\ Font.\ Works\ by\ making\ an\ image,\ drawing\ the\ String\ onto\ it,\ and\ then\ searching\ for\ the\ last\n\ non-transparent\ pixels\ in\ the\ image.\ \n\ \n\ This\ is\ not\ a\ cheap\ method,\ and\ should\ not\ be\ called\ from\ an\ act\ method.\ It\ is\ appropriate\n\ to\ call\ this\ in\ the\ constructor.\n\ \n\ In\ advanced\ cases,\ you\ may\ want\ to\ cache\ the\ results\ during\ a\ loading\ method.\ You\ could\ also\n\ call\ it\ manually\ while\ coding,\ note\ the\ results,\ and\ use\ literal\ values\ to\ avoid\ having\ this\n\ code\ called\ at\ all.\n\ \n\ @param\ font\ the\ GreenFoot.Font\ which\ is\ being\ used\ to\ draw\ text\n\ @param\ text\ the\ actual\ text\ to\ be\ drawn\n\ \n\ @since\ June\ 2021\n
numComments=9
